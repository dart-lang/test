// Copyright (c) 2015, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// TODO(nweiz): support pluggable platforms.
/// An enum of all platforms on which tests can run.
class TestPlatform {
  // When adding new platforms, be sure to update the baseline and derived
  // variable tests in test/backend/platform_selector/evaluate_test.

  /// The command-line Dart VM.
  static const TestPlatform vm = const TestPlatform("VM", "vm", isDartVM: true);

  /// Dartium.
  static const TestPlatform dartium = const TestPlatform("Dartium", "dartium",
      isBrowser: true, isBlink: true, isDartVM: true);

  /// Dartium content shell.
  static const TestPlatform contentShell = const TestPlatform(
      "Dartium Content Shell", "content-shell",
      isBrowser: true, isBlink: true, isDartVM: true, isHeadless: true);

  /// Google Chrome.
  static const TestPlatform chrome = const TestPlatform("Chrome", "chrome",
      isBrowser: true, isJS: true, isBlink: true);

  /// PhantomJS.
  static const TestPlatform phantomJS = const TestPlatform(
      "PhantomJS", "phantomjs",
      isBrowser: true, isJS: true, isBlink: true, isHeadless: true);

  /// Mozilla Firefox.
  static const TestPlatform firefox =
      const TestPlatform("Firefox", "firefox", isBrowser: true, isJS: true);

  /// Apple Safari.
  static const TestPlatform safari =
      const TestPlatform("Safari", "safari", isBrowser: true, isJS: true);

  /// Microsoft Internet Explorer.
  static const TestPlatform internetExplorer = const TestPlatform(
      "Internet Explorer", "ie",
      isBrowser: true, isJS: true);

  /// The command-line Node.js VM.
  static const TestPlatform nodeJS =
      const TestPlatform("Node.js", "node", isJS: true);

  /// The platforms that are supported by the test runner by default.
  static const List<TestPlatform> builtIn = const [
    TestPlatform.vm,
    TestPlatform.dartium,
    TestPlatform.contentShell,
    TestPlatform.chrome,
    TestPlatform.phantomJS,
    TestPlatform.firefox,
    TestPlatform.safari,
    TestPlatform.internetExplorer,
    TestPlatform.nodeJS
  ];

  /// The human-friendly name of the platform.
  final String name;

  /// The identifier used to look up the platform.
  final String identifier;

  /// Whether this platform runs the Dart VM in any capacity.
  final bool isDartVM;

  /// Whether this platform is a browser.
  final bool isBrowser;

  /// Whether this platform runs Dart compiled to JavaScript.
  final bool isJS;

  /// Whether this platform uses the Blink rendering engine.
  final bool isBlink;

  /// Whether this platform has no visible window.
  final bool isHeadless;

  const TestPlatform(this.name, this.identifier,
      {this.isDartVM: false,
      this.isBrowser: false,
      this.isJS: false,
      this.isBlink: false,
      this.isHeadless: false});

  /// Converts a JSON-safe representation generated by [serialize] back into a
  /// [TestPlatform].
  factory TestPlatform.deserialize(Object serialized) {
    if (serialized is String) {
      return builtIn
          .firstWhere((platform) => platform.identifier == serialized);
    }

    var map = serialized as Map;
    return new TestPlatform(map["name"], map["identifier"],
        isDartVM: map["isDartVM"],
        isBrowser: map["isBrowser"],
        isJS: map["isJS"],
        isBlink: map["isBlink"],
        isHeadless: map["isHeadless"]);
  }

  /// Converts [this] into a JSON-safe object that can be converted back to a
  /// [TestPlatform] using [new TestPlatform.deserialize].
  Object serialize() {
    if (builtIn.contains(this)) return identifier;

    return {
      "name": name,
      "identifier": identifier,
      "isDartVM": isDartVM,
      "isBrowser": isBrowser,
      "isJS": isJS,
      "isBlink": isBlink,
      "isHeadless": isHeadless
    };
  }

  String toString() => name;
}
